# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//tools/grit/grit_rule.gni")

# TODO(rouslan): Use the src/ directory. http://crbug.com/327046
libaddressinput_dir = "chromium"

# GYP version: third_party/libaddressinput/libaddressinput.gyp:libaddressinput_strings
grit("strings") {
  source = "$libaddressinput_dir/cpp/res/libaddressinput_strings.grd"
}

# GYP version: third_party/libaddressinput/libaddressinput.gyp:libaddressinput_updated_strings
grit("updated_strings") {
  source = "//chrome/app/address_input_strings.grd"
}

config("libaddressinput_config") {
  defines = [
    "CUSTOM_BASICTYPES=\"base/basictypes.h\"",
    "CUSTOM_SCOPED_PTR=\"base/memory/scoped_ptr.h\"",
  ]
  include_dirs = [ "$libaddressinput_dir/cpp/include" ]
}

# This target provides basic functionality which is cooked into the build.
# GYP version: third_party/libaddressinput/libaddressinput.gyp:libaddressinput_util
static_library("util") {
  sources = [
    "chromium/canonicalize_string.cc",
    "chromium/json.cc",
    "$libaddressinput_dir/cpp/include/libaddressinput/address_data.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/address_field.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/util/basictypes.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/util/internal/basictypes.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/util/internal/move.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/util/internal/scoped_ptr.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/util/internal/template_util.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/util/scoped_ptr.h",
    "$libaddressinput_dir/cpp/src/address_data.cc",
    "$libaddressinput_dir/cpp/src/address_field.cc",
    "$libaddressinput_dir/cpp/src/region_data_constants.cc",
    "$libaddressinput_dir/cpp/src/region_data_constants.h",
    "$libaddressinput_dir/cpp/src/rule.cc",
    "$libaddressinput_dir/cpp/src/rule.h",
    "$libaddressinput_dir/cpp/src/util/canonicalize_string.h",
    "$libaddressinput_dir/cpp/src/util/json.h",
    "$libaddressinput_dir/cpp/src/util/stl_util.h",
    "$libaddressinput_dir/cpp/src/util/string_util.cc",
    "$libaddressinput_dir/cpp/src/util/string_util.h",
  ]

  direct_dependent_configs = [ ":libaddressinput_config" ]
  include_dirs = [ "$root_gen_dir/libaddressinput" ]

  deps = [
    "//base",
    "//base:i18n",
    "//third_party/icu",
    "//third_party/re2",
  ]
}

# This target provides more complicated functionality like pinging servers
# for validation rules.
# GYP version: third_party/libaddressinput/libaddressinput.gyp:libaddressinput
static_library("libaddressinput") {
  sources = [
    "chromium/chrome_downloader_impl.cc",
    "chromium/chrome_downloader_impl.h",
    "chromium/chrome_storage_impl.cc",
    "chromium/chrome_storage_impl.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/address_problem.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/address_ui_component.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/address_ui.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/address_validator.h",
    "$libaddressinput_dir/cpp/include/libaddressinput/load_rules_delegate.h",
    "$libaddressinput_dir/cpp/src/address_problem.cc",
    "$libaddressinput_dir/cpp/src/address_ui.cc",
    "$libaddressinput_dir/cpp/src/address_validator.cc",
    "$libaddressinput_dir/cpp/src/country_rules_aggregator.cc",
    "$libaddressinput_dir/cpp/src/country_rules_aggregator.h",
    "$libaddressinput_dir/cpp/src/fallback_data_store.cc",
    "$libaddressinput_dir/cpp/src/fallback_data_store.h",
    "$libaddressinput_dir/cpp/src/grit.h",
    "$libaddressinput_dir/cpp/src/retriever.cc",
    "$libaddressinput_dir/cpp/src/retriever.h",
    "$libaddressinput_dir/cpp/src/ruleset.cc",
    "$libaddressinput_dir/cpp/src/ruleset.h",
    "$libaddressinput_dir/cpp/src/util/md5.cc",
    "$libaddressinput_dir/cpp/src/util/md5.h",
    "$libaddressinput_dir/cpp/src/util/trie.cc",
    "$libaddressinput_dir/cpp/src/util/trie.h",
  ]

  direct_dependent_configs = [ ":libaddressinput_config" ]

  defines = [
    "VALIDATION_DATA_URL=\"https://i18napis.appspot.com/ssl-aggregate-address/\"",
  ]

  deps = [
    ":strings",
    ":updated_strings",
    ":util",
    "//base",
    "//base:i18n",
    "//third_party/icu",
    "//third_party/re2",
  ]
}

test("libaddressinput_unittests") {
  sources = [
    "chromium/chrome_downloader_impl_unittest.cc",
    "chromium/chrome_rule_test.cc",
    "chromium/chrome_storage_impl_unittest.cc",
    "$libaddressinput_dir/cpp/test/address_data_test.cc",
    "$libaddressinput_dir/cpp/test/address_ui_test.cc",
    "$libaddressinput_dir/cpp/test/address_validator_test.cc",
    "$libaddressinput_dir/cpp/test/country_rules_aggregator_test.cc",
    "$libaddressinput_dir/cpp/test/countryinfo_example_addresses_test.cc",
    "$libaddressinput_dir/cpp/test/fake_downloader.cc",
    "$libaddressinput_dir/cpp/test/fake_downloader.h",
    "$libaddressinput_dir/cpp/test/fake_downloader_test.cc",
    "$libaddressinput_dir/cpp/test/fake_storage.cc",
    "$libaddressinput_dir/cpp/test/fake_storage.h",
    "$libaddressinput_dir/cpp/test/fake_storage_test.cc",
    "$libaddressinput_dir/cpp/test/fallback_data_store_test.cc",
    "$libaddressinput_dir/cpp/test/region_data_constants_test.cc",
    "$libaddressinput_dir/cpp/test/retriever_test.cc",
    "$libaddressinput_dir/cpp/test/rule_test.cc",
    "$libaddressinput_dir/cpp/test/storage_test_runner.cc",
    "$libaddressinput_dir/cpp/test/storage_test_runner.h",
    "$libaddressinput_dir/cpp/test/util/json_test.cc",
    "$libaddressinput_dir/cpp/test/util/md5_unittest.cc",
    "$libaddressinput_dir/cpp/test/util/scoped_ptr_unittest.cc",
    "$libaddressinput_dir/cpp/test/util/stl_util_unittest.cc",
    "$libaddressinput_dir/cpp/test/util/string_util_test.cc",
    "$libaddressinput_dir/cpp/test/util/trie_test.cc",
  ]

  defines = [
    "TEST_DATA_DIR=\"third_party/libaddressinput/src/testdata\"",
  ]

  include_dirs = [
    "$libaddressinput_dir/cpp/src",
    #"'<(SHARED_INTERMEDIATE_DIR)/libaddressinput/',
  ]

  deps = [
    ":libaddressinput",
    ":strings",
    "//base:prefs",
    "//base/test:run_all_unittests",
    "//net:test_support",
    "//testing/gtest",
  ]
}
